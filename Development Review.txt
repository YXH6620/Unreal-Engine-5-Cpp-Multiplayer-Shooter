Version 1.0：
①steam联网插件导入；UE初学者包美术资产导入，动作重定向；

Version 1.1：
①创建角色类，绑定输入；

*******************************************************************************************************

Version 1.2：
①创建角色动画蓝图，建立角色动画状态机；
②继承UAnimInstance，重写NativeInitializeAnimation(初始化)和NativeUpdateAnimation(每帧)
③设定动画状态，并在动画蓝图中设定状态转移条件

*******************************************************************************************************

Version 1.3：
①Non-Seamless Travel 切换地图：
	（1）客户端断开或重连
	（2）第一次加载地图
	（3）第一次连接服务器
	（4）结束多人游戏并开启新游戏
②Seamless Traver
	（1）更加丝滑切换~避免了重连的问题
	（2）在GameMode中实现，bUse'SeamlessTravel=true。同时需要一个Transition map
③多人游戏下的切换：
	（1）UWorld::ServerTravel，旨在服务器上运行，在服务端切换地图，并且所有客户端都要跟随切换
	（2）服务器会调用APlayerController::ClientTravel
④实现：
	（1）重写PostLogin
	（2）切换地图，设置为监听服务器：
	        bUseSeamlessTravel = true;
	        World->ServerTravel(FString("/Game/Maps/BlasterMap?listen")); 
	（3）Project Settings中设置Transition map
	（4）新建GameMode的Blueprint，设置好我们的Character蓝图

*******************************************************************************************************

Version 1.4：
①网络角色权限，可参考本人博客：https://blog.csdn.net/Jason6620/article/details/129677315?spm=1001.2014.3001.5501
②创建OverheadWidget，用于显示角色权限信息
	（1）Widget中设置的文本信息需要与C++中同名，同通过SetText等进行设置
③FString::Printf(TEXT("%s"),*Role);

*******************************************************************************************************

Version 1.5：
①创建枪支类Weapon，设置StaticmeshComponent，利用已有美术资产

*******************************************************************************************************

Version 1.6：
①创建Pickup Widget，并作为Weapon的组合Class附着
②为Weapon设置了一个碰撞体，触发逻辑显示Pickup Widget

*******************************************************************************************************

Version 1.7：
①设置Client与Server的Pickup Widget显示逻辑，实现方法是DOREPLIFETIME_CONDITION，且条件是COND_OwnerOnly，即只有拥有者才显示而不是所有玩家
②设置碰撞体的pickup显示与消失的逻辑
③判断是否被控制 IsLocallyControlled()，因为只有被控制的玩家才能看到pickup

*******************************************************************************************************

Version 1.8：
①创建战斗组件，负责装备武器；将其组合至Character类；并且设置战斗组件必须为可复制（Replicated）
②设置装备动作输入绑定；
③设置Combat Component与Character、Weapon的组合关系
④设置手部骨骼Socket，利用HandSocket->AttachActor附着武器，设置Weapon的Owner，设置Pickup不显示

*******************************************************************************************************

Version 1.9：
①如果在Server摁键，则直接装备武器；
②如果在Client摁键，则需要调用RPC，在Server端执行；
③对武器状态变量EWeaponType进行属性同步（回调）：
	（1）属性注册：DOREPLIFETIME(AWeapon, WeaponState);
	（2）当装备武器就不需要再显示Pickup
	（3）回调：OnRep_WeaponState()

*******************************************************************************************************

Version 1.10：
①设置持枪的动画状态为Replicated，属性同步
②动画蓝图设置Blend pose by bool

*******************************************************************************************************

Version 1.11：
①设置蹲伏状态，动作输入绑定；
②动画状态复制

*******************************************************************************************************

Version 1.12：
①设置瞄准动作，动作输入绑定
②动画状态复制，若在Server直接瞄准，若在Client则调用RPC

*******************************************************************************************************

Version 1.13：
①角色奔跑的Blend Space

*******************************************************************************************************

Version 1.14：
①计算鼠标控制角色时的Yaw变化，并暴露给动画蓝图进行Aiming BlendSpace的控制
②角色持枪需要禁用bOrientRotationToMovement，开启bUseControllerRotationYaw；并将其进行属性同步（回调）

*******************************************************************************************************
Version 1.15：
①Idle和Jump动画状态机的实现；三个状态变量：Is Accelerating、Is In Air、Speed>=0?

*******************************************************************************************************

